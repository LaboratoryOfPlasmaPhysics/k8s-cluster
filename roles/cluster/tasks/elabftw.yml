- name: Ensure elabftw exists
  k8s:
    state: present
    definition:
        apiVersion: v1
        kind: Namespace
        metadata:
          name: elabftw

- name: Create elabftw data PersistentVolumeClaim
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: elabftw-uploads-storage-pvc
        namespace: elabftw
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: longhorn
        resources:
          requests:
            storage: 500Gi

- name: Create elabftw DB PersistentVolumeClaim
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: elabftw-db-storage-pvc
        namespace: elabftw
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: longhorn
        resources:
          requests:
            storage: 20Gi


- name: Create elabftw data PersistentVolumeClaim
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: elabftw-configmap
        labels:
          app: elabftw
        namespace: elabftw
      data:
        SITE_URL: "https://elabftw.lpp.polytechnique.fr"
        SERVER_NAME: "elabftw"
        DISABLE_HTTPS: 'false'
        MAX_PHP_MEMORY: "800M"
        MAX_UPLOAD_SIZE: "100M"
        PHP_TIMEZONE: "Europe/Paris"
        TZ: "Europe/Paris"
        SET_REAL_IP: "false"
        PHP_MAX_CHILDREN: "50"
        PHP_MAX_EXECUTION_TIME: "50"
        USE_REDIS: "true"
        REDIS_HOST: "127.0.0.1"
        DB_HOST: "127.0.0.1"
        DB_PORT: "3306"

- name: check if elabftw cert is installed
  command: kubectl get secret --namespace elabftw
  ignore_errors: no
  register: cmd_result

- name: copy openssl conf
  copy:
    src: elabftw.cnf
    dest: /tmp/elabftw.cnf
  when: "'tls-ssl-elabftw' not in cmd_result.stdout"

- name: generate certs
  shell: |
    openssl genrsa -out /tmp/server.key 2048
    openssl req -new -out /tmp/server.csr -key /tmp/server.key -config /tmp/elabftw.cnf
    openssl x509 -req -days 3650 -in /tmp/server.csr -signkey /tmp/server.key -out /tmp/server.crt -extensions v3_req -extfile /tmp/elabftw.cnf
    openssl dhparam -out /tmp/dhparam.pem 4096
    kubectl create secret generic tls-ssl-elabftw --from-file=/tmp/server.key --from-file=/tmp/server.crt --from-file=/tmp/dhparam.pem -n elabftw
  when: "'tls-ssl-elabftw' not in cmd_result.stdout"


#kubectl create secret -n  elabftw generic elabftw-secrets --from-literal="SECRET_KEY=$(openssl rand -hex 137)"
#kubectl create secret -n  elabftw generic mariadb-secrets --from-literal="DB_ROOT_PASSWORD=$(pwmake 128)" --from-literal='DB_USER=xxxx' --from-literal="DB_PASSWORD=$(pwmake 128)" --from-literal="DB_NAME=xxxxx"

- name: Create elabftw Deployment
  k8s:
    state: present
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: elabftw
        labels:
          app: elabftw
        namespace: elabftw
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: elabftw
        template:
          metadata:
            labels:
              app: elabftw
          spec:
            restartPolicy: Always
            volumes:
              - name: elabftw-uploads-storage
                persistentVolumeClaim:
                  claimName: elabftw-uploads-storage-pvc
              - name: mariadb
                persistentVolumeClaim:
                  claimName: elabftw-db-storage-pvc
              - name: tls-ssl-elabftw
                secret:
                  secretName: tls-ssl-elabftw
            containers:
            - name: elabftw
              image: elabftw/elabimg:latest
              resources:
                limits:
                  cpu: "2"
                  memory: "1000Mi"
                requests:
                  cpu: "2"
                  memory: "500Mi"
              imagePullPolicy: Always
              envFrom:
              - configMapRef:
                  name: elabftw-configmap
              - secretRef:
                  name: elabftw-secrets
              - secretRef:
                  name: mariadb-secrets
              ports:
                - containerPort: 443
                  name: https
              volumeMounts:
                - mountPath: /elabftw/uploads
                  name: elabftw-uploads-storage
                - mountPath: "/ssl/live/elabftw"
                  name: tls-ssl-elabftw
                  
            - name: mysql
              image: mysql:8.0
              env:
              - name: MYSQL_ROOT_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: mariadb-secrets
                    key: DB_ROOT_PASSWORD
              - name: MYSQL_USER
                valueFrom:
                  secretKeyRef:
                    name: mariadb-secrets
                    key: DB_USER
              - name: MYSQL_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: mariadb-secrets
                    key: DB_PASSWORD
              - name: MYSQL_DATABASE
                valueFrom:
                  secretKeyRef:
                    name: mariadb-secrets
                    key: DB_NAME
              - name: TZ
                value: "Europe/Paris"
              securityContext:
                capabilities:
                  drop: ["AUDIT_WRITE", "MKNOD", "SYS_CHROOT", "SETFCAP", "NET_RAW"]
              volumeMounts:
              - mountPath: /var/lib/mysql
                name: mariadb
                subPath: mariadb

            - name: redis
              image: redis:7.0-alpine
              resources:
                limits:
                  cpu: 2
                  memory: 2Gi
                requests:
                  cpu: 100m
                  memory: 100Mi
              ports:
              - containerPort: 6379


- name: Create elabftw Service
  k8s:
    state: present
    definition:
      kind: Service
      apiVersion: v1
      metadata:
        labels:
          k8s-app: elabftw
        name: elabftw
        namespace: elabftw
      spec:
        selector:
          app: elabftw
        type: NodePort
        ports:
          - port: 443
            name: https
            targetPort: 443
            protocol: TCP
            nodePort: 31380
